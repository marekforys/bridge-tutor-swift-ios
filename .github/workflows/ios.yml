name: iOS CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and Test on iPhone simulator
    runs-on: macos-15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select project/workspace and device
        id: select
        run: |
          if ls -A | grep -i \.xcworkspace$ >/dev/null; then echo "filetype=workspace" >> $GITHUB_OUTPUT && echo "file=$(ls -A | grep -i \.xcworkspace$ | head -1)" >> $GITHUB_OUTPUT; else echo "filetype=project" >> $GITHUB_OUTPUT && echo "file=$(ls -A | grep -i \.xcodeproj$ | head -1)" >> $GITHUB_OUTPUT; fi
          echo "device=iPhone 15" >> $GITHUB_OUTPUT

      - name: Resolve scheme or target
        id: resolve
        run: |
          info=$(xcodebuild -list -json | tr -d "\n")
          scheme=$(echo "$info" | ruby -e "require 'json'; j=JSON.parse(STDIN.gets); puts(j.dig('project','schemes')&.first || '')")
          if [ -z "$scheme" ] || [ "$scheme" = "" ]; then
            target=$(echo "$info" | ruby -e "require 'json'; j=JSON.parse(STDIN.gets); puts(j.dig('project','targets')&.first || '')")
            echo "use_target=true" >> $GITHUB_OUTPUT
            echo "name=$target" >> $GITHUB_OUTPUT
          else
            echo "use_target=false" >> $GITHUB_OUTPUT
            echo "name=$scheme" >> $GITHUB_OUTPUT
          fi

      - name: Build
        run: |
          set -o pipefail
          FILETYPE="${{ steps.select.outputs.filetype }}"; FILE="${{ steps.select.outputs.file }}"; DEVICE="${{ steps.select.outputs.device }}"
          echo "Building $FILETYPE: $FILE on $DEVICE"
          if [ "${{ steps.resolve.outputs.use_target }}" = "true" ]; then
            xcodebuild -$FILETYPE "$FILE" -target "${{ steps.resolve.outputs.name }}" -destination "platform=iOS Simulator,name=$DEVICE" build | xcpretty && exit ${PIPESTATUS[0]}
          else
            xcodebuild -$FILETYPE "$FILE" -scheme "${{ steps.resolve.outputs.name }}" -destination "platform=iOS Simulator,name=$DEVICE" build-for-testing | xcpretty && exit ${PIPESTATUS[0]}
          fi

      - name: Test
        run: |
          set -o pipefail
          FILETYPE="${{ steps.select.outputs.filetype }}"; FILE="${{ steps.select.outputs.file }}"; DEVICE="${{ steps.select.outputs.device }}"
          if [ "${{ steps.resolve.outputs.use_target }}" = "true" ]; then
            echo "No shared scheme; running unit test build via target (tests may be skipped)."
            xcodebuild -$FILETYPE "$FILE" -target "${{ steps.resolve.outputs.name }}" -destination "platform=iOS Simulator,name=$DEVICE" build | xcpretty && exit ${PIPESTATUS[0]}
          else
            xcodebuild -$FILETYPE "$FILE" -scheme "${{ steps.resolve.outputs.name }}" -destination "platform=iOS Simulator,name=$DEVICE" test-without-building | xcpretty && exit ${PIPESTATUS[0]}
          fi
